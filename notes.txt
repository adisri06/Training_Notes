Virtual DOM Overview:

	1.	Tree-like structure: Updates only the necessary part of the DOM (e.g., hitting a like button doesn’t refresh the entire page).
	2.	Diffing Algorithm: Used earlier to compare actual and virtual DOM, ensuring efficient updates.
	•	It maintained a copy of virtual memory.
	•	Replaced by React Fiber architecture after React 17.
	3.	React: A library, not a framework (unlike Angular).
	4.	Unidirectional Data Flow: Data always flows in one direction in React.
	5.	MVC Architecture: React handles the view, while Node.js manages the model and control. In Angular, everything is handled internally.
	6.	Reconciliation: The diffing algorithm compared nodes in the actual and virtual DOM until React 17. React Fiber now handles this process.

React Project Architecture:

	1.	Package.json: Acts like the index of a book, listing all the packages used in the application.
	2.	Package-lock.json: Stores installed packages and their versions, including internal dependencies.
	3.	Public Folder: Contains index.html, the entry point of the application with meta-tags and a <div> tag where React mounts the app (src -> index.js calls the root method).

Webpack:

	•	Bundler: Compiles multiple JavaScript files into one, runs the app when npm start is triggered.
	•	Ensures successful compilation and execution on the host.

Babel Package:

	•	JavaScript Compiler: Converts modern JavaScript commands into browser-compatible formats.

React DOM:

	•	No pointer concept in React. Child component props can be modified without affecting the global state.
	•	Button clicks or similar actions only update relevant parts of the DOM without causing a global state or DOM change.

 {/* we cant use for / while loop in the react because babel compiler is not designed
            for these type of loops
            map method worl, for each work but traditional methods will not work 
            inside jsx it will not work for eg it will work before return if there is seprate function where only calculation and logics are present 
            then it will work*/}

Debounce method: google starts searching when we click 2/3 words 

npx json-server --watch db.json --port 4000

4 stages of an variable:
 1. Initialisation of a variable for eg: const [useState, setEmployee] = useState([])
 2. When an variable is hosted on a application MEANS its utitilised , it can be updted using use effect hook ,Its value can be mapped 
 3. Mounting of a variable
 4. Unmounting of a variable


The reason why "hellp" is printed twice in the console when using useEffect is most likely due to React’s Strict Mode. Strict Mode in React runs certain lifecycle methods (like useEffect) twice in development mode to help detect potential side effects or errors in your code. This is a development-only feature to help identify unexpected side effects, and it doesn’t happen in production.
Why does this happen?
React’s Strict Mode in development has a behavior where useEffect and other lifecycle methods are intentionally called twice to ensure that the side effects (like console.log or API calls) are idempotent (i.e., they should produce the same result without unintended consequences when run multiple times).

Redux:
	1.	React Components: Handle their own state locally.
	•	Redux: Manages state in a centralized way, preventing direct state changes by components.
	•	Action: A JavaScript object that describes an event.
		•	It must have a type (describing the action).
		•	It can have payload (optional data that comes with the action).
	Action Creators: Convenient functions that return action objects.
	•	Not mandatory, but useful for:
	•	Maintainability
	•	Abstraction
	•	Encapsulation
	•	Testability

	Reducers:
	•	State modification in Redux is handled by reducers, not components.
	•	Reducers ensure immutability by creating and returning a modified copy of the state.
	•	They respond to actions and modify state accordingly.
	Forbidden in Reducers:
	1. Mutating the arguments passed
	2.Performing side effects like API calls, AJAX call, etc
	3.Calling other non-pure functions (Ex: date.now(), Math.random())

	•	Modularity: Use multiple reducers to manage different parts of the state.
	•	Single Reducer for Store: Only one reducer can be passed to createStore().
	•	combineReducers(): Combines multiple reducers into one function for createStore().
	•	Action Flow: Actions reach the root reducer first, then all child reducers.
	•	State Combination: The root reducer combines the states from all reducers and updates the store with a new state object.
	
	Store: Holds the entire state of the application.
		•	Creating a Store: A store is created using a reducer. 
		The reducer manages state changes and updates the store with the latest state.	
		Store Methods:
	1.	getState(): Returns the current state.
	2.	dispatch(action): Dispatches an action to update the state (triggered by events in React components).
	3.	subscribe(listener): Registers listeners to respond to state changes.
	•	Important: You can’t directly change the store’s data. State is updated only through actions, which are handled by reducers.

	Middleware in Redux - Key Points

	•	Not a Pure Function: Middleware can have side effects, unlike reducers.
	•	Use Cases:
		•	Adds functionality between action and reducer.
		•	Centralizes database-related actions (e.g., AJAX calls).
		•	Pre-processes actions (validates or modifies).
		•	Facilitates debugging.
		•	Reduces boilerplate in actions, leading to fewer tests.
		•	API calls happen through middleware, making it easy to debug mistakes.
		•	Popular Libraries:
		•	Redux Thunk
		•	Redux Saga
		•	Common Requirement: Enables asynchronous actions and wraps the store’s dispatch method.
	•	Middleware Execution: Receives store’s dispatch and getState as arguments and returns a function.
		const customMiddleware = store => next => action => {
		...
		}

	•	Execution Flow:
	•	Receives the store, returns a function that takes next, which in turn returns a function that takes action.
	•	next: Invoked when the middleware completes its task; it passes the action to the next middleware or reducer.
	•	action: The action currently being dispatched.
	•	Access to Store:
	•	Middleware has access to getState() to fetch the current state and dispatch() to dispatch further actions if needed.
